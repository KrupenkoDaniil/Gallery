{"version":3,"file":"builed.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;;;;;ACHnB;;;;;;;;;;;;;;;;ACAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACf8C;AACa;AACQ;AACnE;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wEAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yDAAI,qBAAqB;AAClF;AACA;AACA;AACA,6CAA6C,+BAA+B;AAC5E,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0EAAiB,CAAC,2DAAY;;;;;;;;;;;;;;;;;AC1DoB;AACF;AACA;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8BAA8B;AACvE,iDAAiD,uBAAuB;AACxE,uCAAuC,yDAAI,uBAAuB;AAClE;AACA;AACA;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA,mCAAmC,mCAAmC;AACtE,mCAAmC,iDAAiD;AACpF,6CAA6C,iCAAiC;AAC9E;AACA;AACA,yCAAyC,oCAAoC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAgB;AAC5D,QAAQ,0DAAQ;AAChB;AACA;AACA;AACA,MAAM,0DAA0D;AAChE;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA,MAAM;AACN;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAY;AAChB,IAAI,8DAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA,MAAM;AACN;AACA;AACA;;;;;;;;;;;;;;;;AChJ2D;AAC3D;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iFAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzC2E;AAC3E;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,kCAAkC,wBAAwB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,gBAAgB,2DAAY,OAAO;AACnC,sBAAsB,4DAAa;AACnC,eAAe,2DAAY;AAC3B,+BAA+B,QAAQ,2DAAY,wBAAwB;AAC3E;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,sBAAsB,2DAAY;AAClC;AACA;AACA,wCAAwC,cAAc;AACtD,iBAAiB,4DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAY;AAC7B;AACA,iBAAiB,2DAAY;AAC7B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrGA;AACO;AACP;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNsB;AACD;AACrB","sources":["webpack://gallery/./src/index.html","webpack://gallery/./src/style.css","webpack://gallery/./src/js/click-events.js","webpack://gallery/./src/js/create-desk.js","webpack://gallery/./src/js/create-modal-window.js","webpack://gallery/./src/js/create-new-comment.js","webpack://gallery/./src/js/generate-pics-array.js","webpack://gallery/./src/js/randoming.js","webpack://gallery/webpack/bootstrap","webpack://gallery/webpack/runtime/define property getters","webpack://gallery/webpack/runtime/hasOwnProperty shorthand","webpack://gallery/webpack/runtime/make namespace object","webpack://gallery/./src/main.js"],"sourcesContent":["// Module\nvar code = \"<!DOCTYPE html>\\r\\n<html lang=\\\"en\\\">\\r\\n<head>\\r\\n    <meta charset=\\\"UTF-8\\\">\\r\\n    <title>Document</title>\\r\\n</head>\\r\\n<body>\\r\\n    <div class=\\\"overlay\\\"></div>\\r\\n    \\r\\n    <section class=\\\"post-window\\\"> \\r\\n        <div class=\\\"post-window__image-section image-section\\\">\\r\\n            <img class=\\\"image-section__img\\\" src=\\\"#\\\" alt=\\\"picture\\\">\\r\\n            <a href=\\\"#\\\" class=\\\"image-section__exit-button\\\"></a>\\r\\n            <div class=\\\"image-section__title\\\">\\r\\n                <p class=\\\"image-section__text\\\"></p>\\r\\n                <div class=\\\"image-section__likes\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr>\\r\\n        <div class=\\\"post-window__comment-container\\\">\\r\\n            <div class=\\\"post-window__comments-section comments-section\\\">\\r\\n            </div>\\r\\n            <div class=\\\"post-window__show-comments-button button\\\">Show More Comments</div>\\r\\n        </div>\\r\\n        <form class=\\\"post-window__add-comment add-comment\\\" method=\\\"GET\\\">\\r\\n            <input class=\\\"add-comment__name\\\" type=\\\"text\\\" list=\\\"names\\\" placeholder=\\\"Your name\\\" required>\\r\\n            <datalist id=\\\"names\\\">\\r\\n                <option value=\\\"Daniil Krupenko\\\"></option>\\r\\n                <option value=\\\"Vasia Pypkin\\\"></option>\\r\\n            </datalist>\\r\\n            <textarea class=\\\"add-comment__textarea textarea\\\" name=\\\"comment\\\" id=\\\"comment\\\" placeholder=\\\"Your comment here\\\" required></textarea>\\r\\n            <div class=\\\"add-comment__submit-button button\\\">Submit</div>\\r\\n        </form>\\r\\n    </section>\\r\\n\\r\\n    <section class=\\\"add-window\\\">\\r\\n        <div class=\\\"add-window__image-section image-section\\\">\\r\\n            <div class=\\\"add-window__img-container\\\">\\r\\n                <img class=\\\"add-window__img\\\" src=\\\"#\\\" alt=\\\"new-pic\\\">\\r\\n            </div>\\r\\n            <input id=\\\"file\\\" name=\\\"file\\\" type=\\\"file\\\" accept=\\\"image/png, image/jpeg\\\" class=\\\"add-window__upload-input\\\">\\r\\n            <a href=\\\"#\\\" class=\\\"add-window__exit-button\\\"></a>\\r\\n        </div>\\r\\n        <hr>\\r\\n        <form method=\\\"GET\\\" class=\\\"setting-section\\\">\\r\\n            <label class=\\\"setting-section__label\\\" for=\\\"filter\\\">Choose filters:</label>\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <input class=\\\"setting-section__radiobutton\\\" type=\\\"radio\\\" name=\\\"filter\\\" id=\\\"\\\">\\r\\n            <br>\\r\\n            <textarea class=\\\"setting-section__textarea textarea\\\" name=\\\"description\\\" id=\\\"description\\\" placeholder=\\\"Write description\\\" required></textarea>\\r\\n            <!-- make it anchor -->\\r\\n            <div class=\\\"setting-section__submit-button\\\">Upload new post</div>\\r\\n        </form>\\r\\n    </section>\\r\\n\\r\\n    <template id='comment-template'>\\r\\n        <div class=\\\"comments-section__comment\\\">\\r\\n            <div class=\\\"comment-section__title\\\">\\r\\n                <img class=\\\"comment-section__avatar\\\" src=\\\"#\\\" alt=\\\"picture\\\">\\r\\n                <p class=\\\"comment-section__nickname\\\"></p>\\r\\n            </div>\\r\\n            <p class=\\\"comment-section__text\\\"></p>\\r\\n        </div>\\r\\n    </template>\\r\\n\\r\\n    <template id=\\\"post-template\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-bs-toggle=\\\"modal\\\" data-bs-target=\\\"#exampleModal\\\">\\r\\n        <div class=\\\"post\\\">\\r\\n            <h5>Comments:<span></span></h5>\\r\\n            <h5>Likes:<span></span></h5>\\r\\n        </div>\\r\\n    </template>\\r\\n</body>\\r\\n</html>\\r\\n\";\n// Exports\nexport default code;","// extracted by mini-css-extract-plugin\nexport {};","\r\nexport function setEvent(eventName, eventElement, eventFunction) {\r\n    if (setEvent.activeEvents == undefined) {\r\n        setEvent.activeEvents = [];\r\n    }\r\n    eventElement.addEventListener(eventName, eventFunction);\r\n    setEvent.activeEvents.push([eventElement, eventFunction]);\r\n}\r\n\r\nexport function removeEvents(eventName) {\r\n    for (let i = 0; i < setEvent.activeEvents.length; i++) {\r\n        let eventElement = setEvent.activeEvents[i][0];\r\n        let eventFunction = setEvent.activeEvents[i][1];\r\n        eventElement.removeEventListener(eventName, eventFunction);\r\n    }\r\n}","import { getRandomInt } from \"./randoming.js\";\r\nimport { openModalWindow } from \"./create-modal-window.js\";\r\nimport { generatePicsArray, PICS } from \"./generate-pics-array.js\";\r\n\r\nexport function createDesk(picsArray, containerWidth = 800, RowSize = 5, containerMargin = 15) {\r\n    // Prepare main container\r\n    const body = document.querySelector('body');\r\n    const mainContainer = document.createElement('div');\r\n    mainContainer.classList.add('container');\r\n    mainContainer.style.maxWidth = containerWidth + 'px';\r\n\r\n    // Set all modal windows' appearance\r\n    body.addEventListener('click', (event) => openModalWindow(event, picsArray));\r\n    body.appendChild(mainContainer);\r\n\r\n    // Set parameters\r\n    const postSize = containerWidth / RowSize - containerMargin * 2;\r\n    const addButtonYPos = Math.ceil((picsArray.length / RowSize + 0.1) / 2);\r\n    const rowHalf = Math.ceil(RowSize / 2);\r\n\r\n    // Start loop\r\n    let buttonSet = false;\r\n    for (let i = 0; i < picsArray.length; i++) {\r\n        if (i == (addButtonYPos * RowSize - rowHalf) && !buttonSet) { // if next element is button\r\n            const newElement = document.createElement('label');\r\n            newElement.classList.add('add-button');\r\n            newElement.setAttribute('for', 'file');\r\n            newElement.innerText = 'Add new';\r\n            newElement.style.width = postSize + 'px';\r\n            newElement.style.height = postSize + 'px';\r\n            newElement.style.margin = containerMargin + 'px';\r\n            mainContainer.appendChild(newElement);\r\n            buttonSet = true;\r\n            i--;\r\n        } else { // if next element is regular frame\r\n            const nextElement = picsArray[i];\r\n\r\n            // Create new post\r\n            const postTemplate = document.getElementById('post-template');\r\n            const newPost = postTemplate.content.querySelector('.post');\r\n            newPost.style.margin = containerMargin + 'px';\r\n            newPost.setAttribute('id', i);\r\n            newPost.style.width = postSize + 'px';\r\n            newPost.style.height = postSize + 'px';\r\n            newPost.style.color = nextElement['url'];\r\n            newPost.style.backgroundImage = `url(./img/${PICS[nextElement['url']]})`;\r\n\r\n            // change template content\r\n            const newPostSpans = postTemplate.content.querySelectorAll('span');\r\n            newPostSpans[0].textContent = `${nextElement['comments'].length}`;\r\n            newPostSpans[1].textContent = `${nextElement['likes']}`;\r\n\r\n            const postClone = postTemplate.content.cloneNode(true);\r\n            mainContainer.appendChild(postClone);\r\n        }\r\n    }\r\n}\r\n\r\ncreateDesk(generatePicsArray(getRandomInt(10, 30)));","import { PICS, generatePic } from './generate-pics-array.js';\r\nimport { createNewComment } from './create-new-comment.js';\r\nimport { setEvent, removeEvents } from './click-events.js';\r\n\r\n// Set main Constants\r\nconst mainOverlay = document.querySelector('.overlay');\r\nconst inputFile = document.querySelector('#file');\r\n\r\n// Set event for exeting modal window by pressing \"Escape\" button \r\nlet targetElement, modalWindow;\r\ndocument.addEventListener('keydown', (event,) => {\r\n    if (modalWindow !== undefined) {\r\n        switch (event.code) {\r\n            case 'Escape':\r\n                closeModalWindow(modalWindow);\r\n                break\r\n            case 'Enter':\r\n                if (document.querySelector('.add-comment__textarea:focus')) {\r\n                    createNewComment(targetElement);\r\n                }\r\n                if (document.querySelector('.setting-section__textarea:focus')) {\r\n                    submitPost();\r\n                }\r\n        }\r\n    }\r\n});\r\nexport function openModalWindow(event, picsArray) {\r\n    if (event.target.classList.contains('post')) { //! if we target post\r\n        targetElement = picsArray[event.target.getAttribute('id')];\r\n        modalWindow = document.querySelector('.post-window');\r\n\r\n        // Set attributes and styles\r\n        modalWindow.classList.add('active');\r\n        modalWindow.style.top = '0';\r\n        mainOverlay.style.display = 'block';\r\n\r\n        // Set Image section\r\n        let modalWindowImg = modalWindow.querySelector('img');\r\n        let modalWindowText = modalWindow.querySelector('.image-section__text');\r\n        let modalWindowLikes = modalWindow.querySelector('.image-section__likes');\r\n        modalWindowText.textContent = `${targetElement['descripction']}`;\r\n        modalWindowLikes.textContent = `Likes: ${targetElement['likes']}`;\r\n        modalWindowImg.src = `../img/${PICS[targetElement['url']]}`;\r\n\r\n\r\n        // Set exit button\r\n        const exitButton = modalWindow.querySelector('.image-section__exit-button');\r\n        setEvent('click', exitButton, closeModalWindow);\r\n\r\n        // Set comment section\r\n        const targetElementComments = targetElement['comments'];\r\n        const commentSection = document.querySelector('.comments-section');\r\n        const commentTemplate = document.getElementById('comment-template');\r\n        for (let i = 0; i < targetElementComments.length; i++) {\r\n            // Comment header\r\n            const commentNickname = commentTemplate.content.querySelector('.comment-section__nickname');\r\n            const commentAvatar = commentTemplate.content.querySelector('.comment-section__avatar');\r\n            commentAvatar.src = `${targetElementComments[i]['avatar']}`;\r\n            commentAvatar.alt = `${targetElementComments[i]['avatar'].slice(14, 22)}`;\r\n            commentNickname.textContent = `${targetElementComments[i]['name']}`;\r\n            // Comment text\r\n            const commentText = commentTemplate.content.querySelector('.comment-section__text');\r\n            commentText.textContent = `${targetElementComments[i]['message']}`;\r\n            // Comment clone\r\n            const commentTextClone = commentTemplate.content.cloneNode(true);\r\n            commentSection.appendChild(commentTextClone);\r\n        }\r\n\r\n        // Create new comment\r\n        const newCommentButton = document.querySelector('.add-comment__submit-button');\r\n        const createNewCommentEvent = () => createNewComment(targetElement);\r\n        setEvent('click', newCommentButton, createNewCommentEvent);\r\n\r\n\r\n\r\n    } else if (event.target.classList.contains('add-button')) { //! if we target add button\r\n        modalWindow = document.querySelector('.add-window');\r\n\r\n        setEvent('change', inputFile, uploadPicture);\r\n\r\n        // Set exit button\r\n        const exitButton = modalWindow.querySelector('.add-window__exit-button');\r\n        setEvent('click', exitButton, closeModalWindow);\r\n\r\n        // Set submit button\r\n        const submitButton = document.querySelector('.setting-section__submit-button');\r\n        setEvent('click', submitButton, submitPost)\r\n\r\n    } else if (modalWindow !== undefined // if modal window is set\r\n        && modalWindow.classList.contains('active') // if modal window is active\r\n        && event.target.closest('section') === null) { //! if we target any other part of the viewport\r\n        closeModalWindow();\r\n    }\r\n}\r\n\r\nfunction closeModalWindow() {\r\n    modalWindow.classList.remove('active');\r\n    document.querySelector('.comments-section').innerHTML = '';\r\n    modalWindow.style.top = '-100%';\r\n    mainOverlay.style.display = 'none';\r\n    removeEvents('click');\r\n    removeEvents('change');\r\n}\r\n\r\nfunction uploadPicture() {\r\n    const modalWindowImg = modalWindow.querySelector('img');\r\n    const reader = new FileReader();\r\n    const selectedFile = inputFile.files[0];\r\n\r\n    if (selectedFile) {\r\n        reader.addEventListener('load', () => {\r\n            modalWindowImg.src = reader.result;\r\n        });\r\n        reader.readAsDataURL(selectedFile);\r\n\r\n        // Set attributes and styles\r\n        modalWindow.classList.add('active');\r\n        modalWindow.style.top = '0';\r\n        mainOverlay.style.display = 'block';\r\n    }\r\n}\r\n\r\nfunction submitPost() {\r\n\r\n    // Check if textarea has any content\r\n    const textarea = document.querySelector('.setting-section__textarea');\r\n\r\n    if (textarea.value !== '' && fileInput.value !== '') { //! we can create new post only if it has discription and img\r\n        // Set active radio button\r\n        let radioButton;\r\n        document.querySelectorAll('.setting-section__radiobutton').forEach((button) => {\r\n            if (button.checked) {\r\n                radioButton = button;\r\n            }\r\n        });\r\n        //TODO: Add setting different filters on photo\r\n\r\n        //TODO: Add new post in general PICS object and set it in viewport\r\n        const nextPostId = generatePic.maxPicId + 1;\r\n\r\n        textarea.value = '';\r\n    } else {\r\n        alert(\"Fill in all necessities!\")\r\n    }\r\n}\r\n","import { generateComment } from \"./generate-pics-array.js\";\r\n\r\nexport function createNewComment(targetElement) {\r\n\r\n    // Check if textarea has any content\r\n    const textarea = document.getElementById('comment');\r\n    const commenterName = document.querySelector('.add-comment__name');\r\n    if (textarea.value !== '' && commenterName.value.length > 1) {\r\n\r\n        // Find necessary elements\r\n        const commentSection = document.querySelector('.comments-section');\r\n        const commentTemplate = document.getElementById('comment-template');\r\n\r\n        // Set basics\r\n        const commentName = commentTemplate.content.querySelector('.comment-section__nickname');\r\n        const commentAvatar = commentTemplate.content.querySelector('.comment-section__avatar');\r\n        commentAvatar.src = '../img/avatars/avatar-4.png';\r\n        commentName.textContent = commenterName.value;\r\n\r\n        // Comment text\r\n        const commentText = commentTemplate.content.querySelector('.comment-section__text');\r\n        commentText.textContent = textarea.value;\r\n\r\n        // Creating new comment object\r\n        const newComment = {\r\n            id: generateComment.maxCommentId++ + 1, //? don't know how it works but it does!\r\n            avatar: commentAvatar.src,\r\n            message: textarea.value,\r\n            name: commenterName.value\r\n        };\r\n        targetElement['comments'].push(newComment);\r\n\r\n        // Creating a new comment clone\r\n        const commentTextClone = commentTemplate.content.cloneNode(true);\r\n        commentSection.appendChild(commentTextClone);\r\n\r\n        textarea.value = '';\r\n    } else {\r\n        alert(\"Fill in all the fields!\");\r\n    }\r\n\r\n}","import { getRandomInt, getRandomElem, getRandomKey } from \"./randoming.js\";\r\n\r\nconst MIN_LIKE_COUNT = 15;\r\nconst MAX_LIKE_COUNT = 200;\r\nconst MAX_COMMENT_COUNT = 10;\r\nexport const PICS = {\r\n    'gold': 'section_pic_winter.jpg',\r\n    'white': 'section_pic_summer.jpg',\r\n    'darkgreen': 'section_pic_spring.jpg',\r\n    'lime': 'section_pic_2.jpg',\r\n    'darkred': 'section_pic_1.jpeg',\r\n    'red': 'winter_scenery.jpg',\r\n    'orange': 'fly_me_to_the_moon.jpg',\r\n    'purple': 'cat.jpg',\r\n    'blue': 'Man_drinking_cocoa.jpg',\r\n    'black': 'Man_drinking_tea.jpg',\r\n};\r\nconst DESCRIPTIONS = [\r\n    'This is my food',\r\n    'Me and my family',\r\n    'Look, my cat is so dump <3 <3 <3',\r\n    'Just a reg com for reg pic',\r\n    'I <3 pizza'\r\n];\r\nconst MESSAGES = [\r\n    'Wow, really cool!',\r\n    'Hey, thats awesome!!!',\r\n    'Picture, I choose YOU1',\r\n    'I like you',\r\n    'Like&Subscribe',\r\n    'This is the best photo I\\'ve ever seen!'\r\n];\r\nconst NAMES = [\r\n    'Dima',\r\n    'Vlad',\r\n    'Lesha',\r\n    'Daniil',\r\n    'Masha',\r\n    'Lena',\r\n    'Gena',\r\n    'Natasha'\r\n];\r\n\r\nexport function generatePicsArray(picturesNumber) {\r\n    const maxCommentId = MAX_COMMENT_COUNT * picturesNumber;\r\n\r\n    // Generate an array with certain amount of objects within\r\n    // using Array.from:\r\n    const pictures = Array.from({ length: picturesNumber }, () => generatePic(picturesNumber, maxCommentId));\r\n\r\n    // using new Array(n).fill().map(() => func)\r\n    // let pictures_fill = new Array(picturesNumber).fill().map(() => generatePic(picturesNumber, maxComId));\r\n\r\n    return pictures;\r\n}\r\n\r\nexport function generatePic(maxPicId, maxCommentId) {\r\n    if (generatePic.maxPicId === undefined) {\r\n        generatePic.maxPicId = maxPicId;\r\n    }\r\n\r\n    const newPic = {\r\n        id: getUniqueId.call(generatePic, maxPicId),\r\n        // url: `./photos/${nextId}.jpg`,\r\n        url: `${getRandomKey(PICS)}`,\r\n        descripction: getRandomElem(DESCRIPTIONS),\r\n        likes: getRandomInt(MIN_LIKE_COUNT, MAX_LIKE_COUNT), //! 15 - 200\r\n        comments: Array.from({ length: getRandomInt(0, MAX_COMMENT_COUNT) }, () => generateComment(maxCommentId)) //! 0 - 10\r\n    };\r\n    return newPic;\r\n}\r\n\r\nexport function generateComment(maxCommentId) {\r\n    if (generateComment.maxCommentId === undefined) {\r\n        generateComment.maxCommentId = maxCommentId;\r\n    }\r\n\r\n    const commenter = getRandomInt(0, 5);\r\n    const newComment = {\r\n        id: getUniqueId.call(generateComment, maxCommentId),\r\n        avatar: `./img/avatars/avatar-${commenter + 1}.png`,\r\n        message: getRandomElem(MESSAGES),\r\n        name: NAMES[commenter]\r\n    };\r\n    return newComment;\r\n}\r\n\r\nfunction getUniqueId(maxId) {\r\n    // Static var immitation\r\n    if (this.usedIds === undefined) {\r\n        this.usedIds = [];\r\n    }\r\n\r\n    // Generate new id\r\n    let nextId = getRandomInt(0, maxId);\r\n    while (this.usedIds.includes(nextId)) {\r\n        nextId = getRandomInt(0, maxId);\r\n    }\r\n    this.usedIds.push(nextId);\r\n\r\n    return nextId;\r\n}","// random number\r\nexport function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min); // The maximum is inclusive and the minimum is inclusive\r\n};\r\n\r\n// get random number\r\nexport function getRandomElem(list) {\r\n    if (list.length) {\r\n        return list[getRandomInt(0, list.length - 1)];\r\n    };\r\n};\r\n\r\nexport function getRandomKey(dic) {\r\n    const list = [];\r\n    for (let key in dic) {\r\n        list.push(key);\r\n    };\r\n    return list[getRandomInt(0, list.length - 1)];\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './index.html';\r\nimport './style.css';\r\n\r\nimport './js/create-desk.js';"],"names":[],"sourceRoot":""}